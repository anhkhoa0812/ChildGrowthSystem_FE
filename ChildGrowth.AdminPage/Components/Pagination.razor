<nav aria-label="Pagination">
    <ul class="pagination mb-0">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(CurrentPage == 1)">First</button>
        </li>
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="() => GoToPage(CurrentPage - 1)" disabled="@(CurrentPage == 1)">
                <i class="fas fa-chevron-left"></i>
            </button>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="() => GoToPage(CurrentPage + 1)" disabled="@(CurrentPage == TotalPages)">
                <i class="fas fa-chevron-right"></i>
            </button>
        </li>
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="() => GoToPage(TotalPages)" disabled="@(CurrentPage == TotalPages)">Last</button>
        </li>
    </ul>
</nav>

@code {
    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public int TotalItems { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChange { get; set; }

    private int TotalPages => (int)Math.Ceiling(TotalItems / (double)PageSize);

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= TotalPages && page != CurrentPage)
        {
            await OnPageChange.InvokeAsync(page);
        }
    }
}