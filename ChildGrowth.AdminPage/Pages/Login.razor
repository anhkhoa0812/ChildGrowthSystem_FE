@page "/Login"
@using System.ComponentModel.DataAnnotations
@using System.IdentityModel.Tokens.Jwt
@using ChildGrowth.AdminPage.Authentication
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage

<PageTitle>Login</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="text-center">Login</h3>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group mb-3">
                        <label for="username">Username</label>
                        <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Username)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password">Password</label>
                        <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    <div class="form-group d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="ms-1">Logging in...</span>
                            }
                            else
                            {
                                <span>Login</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7063/api/v1/users/signin", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (responseContent != null && !string.IsNullOrEmpty(responseContent.AccessToken))
                {
                    // Decode and check the role before proceeding
                    var handler = new JwtSecurityTokenHandler();
                    var jsonToken = handler.ReadToken(responseContent.AccessToken) as JwtSecurityToken;
                
                    // Check for Admin role
                    var roleClaim = jsonToken?.Claims.FirstOrDefault(c => 
                        c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");
                
                    if (roleClaim?.Value != "Admin")
                    {
                        errorMessage = "Access denied. Only administrators can log in.";
                        isLoading = false;
                        return;
                    }

                    // Store the token
                    await LocalStorage.SetItemAsync("authToken", responseContent.AccessToken);

                    // Update auth state
                    ((CustomAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(responseContent.AccessToken);

                    // Redirect to home page
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Invalid response from server";
                }
            }
            else
            {
                errorMessage = $"Login failed: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        public string AccessToken { get; set; } = string.Empty;
        // Add any other properties returned by your API
    }
}