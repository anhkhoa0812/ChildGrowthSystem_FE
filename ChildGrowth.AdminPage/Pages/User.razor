@page "/User"
@using ChildGrowth.AdminPage.Authentication
@using ChildGrowth.AdminPage.Models
@using ChildGrowth.AdminPage.Components
@using ChildGrowth.AdminPage.Components.User
@using Microsoft.AspNetCore.Components.Rendering
@inject AuthorizedHttpClient AuthHttp
@inject NavigationManager NavigationManager

<AuthorizeView Roles="Admin">
    <Authorized>
        <h3 class="mb-4">User Management</h3>

        <div class="card mb-4">
            <div class="card-header">
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Search users..."
                                   @bind-value="SearchTerm" @bind-value:event="oninput" @onkeydown="HandleKeyDown" />
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="PerformSearch">
                                    <i class="fas fa-search"></i> Search
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" value="@UserType" @onchange="HandleUserTypeChange">
                            <option value="">All Types</option>
                            <option value="Member">Member</option>
                            <option value="Doctor">Doctor</option>
                            <!-- Other user types -->
                        </select>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <p class="mt-2">Loading users...</p>
                    </div>
                }
                else if (displayedUsers == null || !displayedUsers.Any())
                {
                    <div class="alert alert-info">
                        No users found. @(errorMessage != null ? errorMessage : "")
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th @onclick="@(() => SortBy("UserId"))">
                                        ID
                                        <SortIndicator Field="UserId" CurrentSortField="@SortField" IsAscending="@IsAscending" />
                                    </th>
                                    <th @onclick="@(() => SortBy("Username"))">
                                        Username
                                        <SortIndicator Field="Username" CurrentSortField="@SortField" IsAscending="@IsAscending" />
                                    </th>
                                    <th @onclick="@(() => SortBy("Email"))">
                                        Email
                                        <SortIndicator Field="Email" CurrentSortField="@SortField" IsAscending="@IsAscending" />
                                    </th>
                                    <th @onclick="@(() => SortBy("FullName"))">
                                        Full Name
                                        <SortIndicator Field="FullName" CurrentSortField="@SortField" IsAscending="@IsAscending" />
                                    </th>
                                    <th @onclick="@(() => SortBy("UserType"))">
                                        User Type
                                        <SortIndicator Field="UserType" CurrentSortField="@SortField" IsAscending="@IsAscending" />
                                    </th>
                                    <th @onclick="@(() => SortBy("Status"))">
                                        Status
                                        <SortIndicator Field="Status" CurrentSortField="@SortField" IsAscending="@IsAscending" />
                                    </th>
                                    <th @onclick="@(() => SortBy("CreatedAt"))">
                                        Created At
                                        <SortIndicator Field="CreatedAt" CurrentSortField="@SortField" IsAscending="@IsAscending" />
                                    </th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in displayedUsers)
                                {
                                    <tr>
                                        <td>@user.UserId</td>
                                        <td>@user.Username</td>
                                        <td>@user.Email</td>
                                        <td>@user.FullName</td>
                                        <td>
                                            <span class="badge @GetUserTypeBadgeClass(user.UserType)">
                                                @(string.IsNullOrEmpty(user.UserType) ? "N/A" : user.UserType)
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(user.Status)">
                                                @(string.IsNullOrEmpty(user.Status) ? "Unknown" : user.Status)
                                            </span>
                                        </td>
                                        <td>@(user.CreatedAt?.ToString("yyyy-MM-dd") ?? "N/A")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-info" @onclick="() => ViewUserDetails(user.UserId)">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-primary" @onclick="() => EditUser(user.UserId)">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(user)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div>
                            Showing @(startIndex + 1) to @Math.Min(startIndex + displayedUsers.Count, totalItems) of @totalItems users
                        </div>
                        <div>
                            <select class="form-control" @onchange="HandlePageSizeChange">
                                <option value="10" selected="@(PageSize == 10)">10 per page</option>
                                <option value="25" selected="@(PageSize == 25)">25 per page</option>
                                <option value="50" selected="@(PageSize == 50)">50 per page</option>
                                <option value="100" selected="@(PageSize == 100)">100 per page</option>
                            </select>
                        </div>
                        <Pagination CurrentPage="CurrentPage" TotalItems="totalItems" PageSize="PageSize" OnPageChange="HandlePageChange" />
                    </div>
                }
            </div>
        </div>

        @if (showDeleteModal)
        {
            <DeleteUserModal User="selectedUser" OnCancel="CancelDelete" OnConfirm="DeleteUser" />
        }

        @if (showUserDetailModal)
        {
            <UserDetailModal User="selectedUser" OnClose="CloseUserDetailModal" />
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning" role="alert">
            This page requires administrator privileges.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<UserResponse> displayedUsers = new();
    private bool isLoading = true;
    private string errorMessage;
    private bool showDeleteModal = false;
    private bool showUserDetailModal = false;
    private UserResponse selectedUser;
    private int totalItems = 0;

    [Parameter, SupplyParameterFromQuery(Name = "page")]
    public int CurrentPage { get; set; } = 1;

    [Parameter, SupplyParameterFromQuery(Name = "size")]
    public int PageSize { get; set; } = 10;

    [Parameter, SupplyParameterFromQuery(Name = "search")]
    public string SearchTerm { get; set; } = "";

    [Parameter, SupplyParameterFromQuery(Name = "sort")]
    public string SortField { get; set; } = "UserId";

    [Parameter, SupplyParameterFromQuery(Name = "asc")]
    public bool IsAscending { get; set; } = true;
    
    // Add the new property for UserType
    [Parameter, SupplyParameterFromQuery(Name = "type")]
    public string UserType { get; set; } = "";

    private int startIndex => (CurrentPage - 1) * PageSize;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (string.IsNullOrEmpty(query["page"]) || string.IsNullOrEmpty(query["size"]))
        {
            NavigationManager.NavigateTo("/User?page=1&size=10");
            return;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            var url = $"{BaseApiUrl.Url}/users?page={CurrentPage}&size={PageSize}&sortBy={SortField}&isAsc={IsAscending}&UserType={UserType}";
            if (!string.IsNullOrWhiteSpace(SearchTerm))
            {
                url += $"&Name={Uri.EscapeDataString(SearchTerm)}";
            }
            if (!string.IsNullOrWhiteSpace(UserType))
            {
                url += $"&UserType={Uri.EscapeDataString(UserType)}";
            }

            var response = await AuthHttp.GetFromJsonAsync<PagingBaseResponse<UserResponse>>(url);
            if (response != null)
            {
                displayedUsers = response.Items.ToList();
                totalItems = response.Total;
            }
            else
            {
                errorMessage = "Failed to load user data.";
                displayedUsers = new List<UserResponse>();
                totalItems = 0;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading users: {ex.Message}";
            displayedUsers = new List<UserResponse>();
            totalItems = 0;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    // New method to handle filter change
    private void HandleUserTypeChange(ChangeEventArgs e)
    {
        UserType = e.Value.ToString();
        CurrentPage = 1;
        NavigateToCurrentState();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            PerformSearch();
        }
    }

    private void PerformSearch()
    {
        CurrentPage = 1;
        NavigateToCurrentState();
    }

    private void SortBy(string field)
    {
        if (SortField == field)
        {
            IsAscending = !IsAscending;
        }
        else
        {
            SortField = field;
            IsAscending = true;
        }
        CurrentPage = 1;
        NavigateToCurrentState();
    }

    private void HandlePageChange(int newPage)
    {
        CurrentPage = newPage;
        NavigateToCurrentState();
    }

    private void HandlePageSizeChange(ChangeEventArgs e)
    {
        PageSize = int.Parse(e.Value.ToString());
        CurrentPage = 1;
        NavigateToCurrentState();
    }

    private void NavigateToCurrentState()
    {
        var url = $"/User?page={CurrentPage}&size={PageSize}&sort={SortField}&asc={IsAscending}";
        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            url += $"&search={Uri.EscapeDataString(SearchTerm)}";
        }
        if (!string.IsNullOrWhiteSpace(UserType))
        {
            url += $"&type={Uri.EscapeDataString(UserType)}";
        }
        NavigationManager.NavigateTo(url);
    }

    private void ViewUserDetails(int userId)
    {
        selectedUser = displayedUsers.FirstOrDefault(u => u.UserId == userId);
        if (selectedUser != null)
        {
            showUserDetailModal = true;
        }
    }

    private void CloseUserDetailModal()
    {
        showUserDetailModal = false;
        selectedUser = null;
    }

    private void EditUser(int userId)
    {
        Console.WriteLine($"Editing user {userId}");
    }

    private void ConfirmDelete(UserResponse user)
    {
        selectedUser = user;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        selectedUser = null;
    }

    private async Task DeleteUser()
    {
        try
        {
            if (selectedUser == null) return;
            var response = await AuthHttp.DeleteAsync($"https://localhost:7063/api/v1/users/{selectedUser.UserId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                errorMessage = $"Failed to delete user. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting user: {ex.Message}";
        }
        finally
        {
            showDeleteModal = false;
            selectedUser = null;
            StateHasChanged();
        }
    }

    private string GetUserTypeBadgeClass(string userType) => userType?.ToLower() switch
    {
        "member" => "bg-primary",
        "doctor" => "bg-success",
        _ => "bg-secondary"
    };

    private string GetStatusBadgeClass(string status) => status?.ToLower() switch
    {
        "active" => "bg-success",
        "inactive" => "bg-secondary",
        _ => "bg-secondary"
    };

    private class SortIndicator : ComponentBase
    {
        [Parameter] public string Field { get; set; }
        [Parameter] public string CurrentSortField { get; set; }
        [Parameter] public bool IsAscending { get; set; }

        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            builder.OpenElement(0, "i");
            builder.AddAttribute(1, "class", Field == CurrentSortField
                ? (IsAscending ? "fas fa-sort-up ml-1" : "fas fa-sort-down ml-1")
                : "fas fa-sort text-muted ml-1");
            builder.CloseElement();
        }
    }
}